'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

exports.getLocationByOffset = getLocationByOffset;
exports.parseSourceMap = parseSourceMap;

var _trace = require('./trace');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RADIX = 10; /*
                
                Copyright 2017 ZeroEx Inc.
                
                Licensed under the Apache License, Version 2.0 (the "License");
                you may not use this file except in compliance with the License.
                You may obtain a copy of the License at
                
                http://www.apache.org/licenses/LICENSE-2.0
                
                Unless required by applicable law or agreed to in writing, software
                distributed under the License is distributed on an "AS IS" BASIS,
                WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                See the License for the specific language governing permissions and
                limitations under the License.
                
                */

/*
 Modified by Jaynti Kanani <jdkanani@matic.network>
*/

function getLocationByOffset(str) {
  var locationByOffset = { 0: { line: 1, column: 0 } };
  var currentOffset = 0;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)(str.split('')), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var char = _step.value;

      var location = locationByOffset[currentOffset];
      var isNewline = char === '\n';
      locationByOffset[currentOffset + 1] = {
        line: location.line + (isNewline ? 1 : 0),
        column: isNewline ? 0 : location.column + 1
      };
      currentOffset++;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return locationByOffset;
}

// Parses a sourcemap string
// The solidity sourcemap format is documented here: https://github.com/ethereum/solidity/blob/develop/docs/miscellaneous.rst#source-mappings
function parseSourceMap(sourceCodes, srcMap, bytecodeHex, sources) {
  var bytecode = Uint8Array.from(Buffer.from(bytecodeHex, 'hex'));
  var pcToInstructionIndex = (0, _trace.getPcToInstructionIndexMapping)(bytecode);
  var locationByOffsetByFileIndex = sourceCodes.map(getLocationByOffset);
  var entries = srcMap.split(';');
  var lastParsedEntry = {};
  var instructionIndexToSourceRange = {};
  entries.forEach(function (entry, i) {
    var _entry$split = entry.split(':'),
        _entry$split2 = (0, _slicedToArray3.default)(_entry$split, 3),
        instructionIndexStrIfExists = _entry$split2[0],
        lengthStrIfExists = _entry$split2[1],
        fileIndexStrIfExists
    // jumpTypeStrIfExists
    = _entry$split2[2];

    var instructionIndexIfExists = parseInt(instructionIndexStrIfExists, RADIX);
    var lengthIfExists = parseInt(lengthStrIfExists, RADIX);
    var fileIndexIfExists = parseInt(fileIndexStrIfExists, RADIX);
    var offset = isNaN(instructionIndexIfExists) ? lastParsedEntry.offset : instructionIndexIfExists;
    var length = isNaN(lengthIfExists) ? lastParsedEntry.length : lengthIfExists;
    var fileIndex = isNaN(fileIndexIfExists) ? lastParsedEntry.fileIndex : fileIndexIfExists;
    var parsedEntry = {
      offset: offset,
      length: length,
      fileIndex: fileIndex
    };

    if (parsedEntry.fileIndex !== -1) {
      var file = locationByOffsetByFileIndex[parsedEntry.fileIndex];
      var sourceRange = {
        location: {
          start: file[parsedEntry.offset],
          end: file[parsedEntry.offset + parsedEntry.length]
        },
        fileName: sources[parsedEntry.fileIndex]
      };
      instructionIndexToSourceRange[i] = sourceRange;
    } else {
      // Some assembly code generated by Solidity can't be mapped back to a line of source code.
      // Source: https://github.com/ethereum/solidity/issues/3629
    }
    lastParsedEntry = parsedEntry;
  });

  var pcsToSourceRange = {};
  (0, _keys2.default)(pcToInstructionIndex).forEach(function (programCounterKey) {
    var pc = parseInt(programCounterKey, RADIX);
    var instructionIndex = pcToInstructionIndex[pc];
    pcsToSourceRange[pc] = instructionIndexToSourceRange[instructionIndex];
  });

  return pcsToSourceRange;
}